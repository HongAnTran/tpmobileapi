generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                Int                     @id @default(autoincrement())
  title             String                  @unique
  slug              String                  @unique
  description_html  String?
  brand             Brand?                  @relation(fields: [brand_id], references: [id])
  brand_id          Int?
  available         Boolean                 @default(true)
  status            Int                     @default(0)
  created_at        DateTime                @default(now())
  updated_at        DateTime?               @updatedAt
  published_at      DateTime?
  barcode           String?                 @unique
  short_description String?
  meta_data         Json?
  meta_tags         Json?
  price             Float                   @default(0)
  compare_at_price  Float                   @default(0)
  price_max         Float                   @default(0)
  price_min         Float                   @default(0)
  related           Int[]                   @default([])
  sub_categories    ProductCategories[]
  category_id       Int
  category          Category                @relation(fields: [category_id], references: [id])
  variants          ProductVariant[]
  specifications    ProductSpecifications[] @relation("ProductToProductSpecifications")
  images            ProductImage[]
  ratings           Rating[]
  questions         Question[]
  tags              Tags[]
  attributes        ProductAttributes[]
  product_orders    ProductOrder[]

  @@index([category_id, status])
}

model Tags {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  published   Boolean   @default(false)
  products    Product[]
}

model ProductCategories {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id  Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id Int
  priority    Int?

  @@unique([product_id, category_id])
}

model ProductAttributes {
  id           Int               @id @default(autoincrement())
  product      Product           @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id   Int
  attribute    Attributes        @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  attribute_id Int
  position     Int
  values       AttributeValues[]

  @@unique([product_id, attribute_id])
}

model Category {
  id                Int                 @id @default(autoincrement())
  title             String              @unique
  slug              String              @unique
  description       String?
  image             String?
  published         Boolean?            @default(false)
  meta_data         Json?
  productCategories ProductCategories[]
  products          Product[]
}

model Question {
  id          Int       @id @default(autoincrement())
  content     String
  product     Product   @relation(fields: [product_id], references: [id])
  product_id  Int
  answers     Answer[]
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  customer    Customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  customer_id Int?
  email       String?
  phone       String?
  full_name   String?
}

model Answer {
  id          Int       @id @default(autoincrement())
  content     String
  question    Question  @relation(fields: [question_id], references: [id])
  question_id Int
  createdAt   DateTime  @default(now())
  author      User?     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id   Int?
  customer    Customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  customer_id Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
}

model Rating {
  id          Int       @id @default(autoincrement())
  rate        Int
  content     String?
  images      String[]
  product_id  Int
  product     Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  customer    Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  customer_id Int
  like_count  Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
}

model ProductVariant {
  id                 Int               @id @default(autoincrement())
  barcode            String?           @unique
  position           Int
  compare_at_price   Float
  price              Float
  price_origin       Float             @default(0)
  sku                String            @unique
  title              String
  updated_at         DateTime?         @updatedAt
  created_at         DateTime          @default(now())
  inventory_quantity Int
  sold_quantity      Int               @default(0)
  available          Boolean
  product_id         Int
  product            Product           @relation(fields: [product_id], references: [id], onDelete: Cascade)
  image              ProductImage?     @relation(fields: [image_id], references: [id])
  image_id           Int?
  attribute_values   AttributeValues[]
  product_orders     ProductOrder[]
}

model Attributes {
  id               Int                 @id @default(autoincrement())
  name             String              @unique
  key              String?             @unique
  attribute_values AttributeValues[]
  style            OptionStyle         @default(RECTANGLE)
  products         ProductAttributes[]
}

model AttributeValues {
  id                Int                 @id @default(autoincrement())
  value             String              @unique
  slug              String              @unique
  hex_color         String?
  attribute_id      Int
  attribute         Attributes          @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  variants          ProductVariant[]
  productAttributes ProductAttributes[]
}

model ProductImage {
  id             Int              @id @default(autoincrement())
  url            String
  alt_text       String?
  position       Int
  productVariant ProductVariant[]
  is_featured    Boolean          @default(false)
  product        Product          @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id     Int
}
enum OptionStyle {
  IMAGE
  COLOR
  CIRCLE
  RECTANGLE
  RADIO
}

model SpecificationsGroup {
  id             Int                     @id @default(autoincrement())
  name           String                  @unique
  specifications ProductSpecifications[]
  type_id        Int
  type           SpecificationsType      @relation(fields: [type_id], references: [id], onDelete: Cascade)
}

model SpecificationsType {
  id     Int                   @id @default(autoincrement())
  name   String
  groups SpecificationsGroup[]
}

model ProductSpecifications {
  id       Int                 @id @default(autoincrement())
  value    String
  link     String?
  product  Product[]           @relation("ProductToProductSpecifications")
  group    SpecificationsGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id Int
}

model Cart {
  id          Int            @id @default(autoincrement())
  token       String         @unique
  item_count  Int
  total_price Float
  note        String?
  items       ProductOrder[]
  customer_id Int?
  customer    Customer?      @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  created_at  DateTime       @default(now())
  updated_at  DateTime?      @updatedAt
}

model Order {
  id          Int            @id @default(autoincrement())
  token       String         @unique
  code        String         @unique
  total_price Float
  temp_price  Float
  ship_price  Float
  discount    Float
  note        String?
  status      Int
  available   Boolean        @default(true)
  promotions  Json[]
  shipping    Shipping?
  payment     Payment?
  items       ProductOrder[]
  customer_id Int?
  customer    Customer?      @relation(fields: [customer_id], references: [id])
  created_at  DateTime       @default(now())
  updated_at  DateTime?      @updatedAt

  @@index([status])
}

model Shipping {
  id                      Int            @id @default(autoincrement())
  order_id                Int            @unique
  address                 String
  province                String
  district                String
  ward                    String
  country                 String
  address_full            String
  ship_date               DateTime?
  tracking_number         String?
  email                   String?
  phone                   String
  fullname                String
  status                  ShippingStatus @default(PROCESSING)
  order                   Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  tracking_url            String? // Đường dẫn theo dõi đơn hàng
  carrier                 String? // Tên công ty vận chuyển
  estimated_delivery_date DateTime? // Ngày dự kiến giao hàng
  shipping_method         String? // Phương thức vận chuyển
  delivery_status         String? // Trạng thái giao hàng
  created_at              DateTime       @default(now())
  updated_at              DateTime?      @updatedAt
}

enum ShippingStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

model Payment {
  id             Int           @id @default(autoincrement())
  order_id       Int           @unique
  method         String
  transaction_id String?
  amount         Float
  status         PaymentStatus
  payment_date   DateTime?
  order          Order         @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model ProductOrder {
  id                  Int             @id @default(autoincrement())
  title               String
  slug                String
  category_title      String
  category_id         Int
  vendor              String
  barcode             String?
  line_price          Float
  price               Float
  price_original      Float
  line_price_original Float
  variant_id          Int
  product_id          Int
  variant_sid         Int?
  product_sid         Int?
  variant             ProductVariant? @relation(fields: [variant_sid], references: [id], onDelete: Cascade)
  product             Product?        @relation(fields: [product_sid], references: [id], onDelete: Cascade)
  product_title       String
  variant_title       String
  variant_options     String[]
  quantity            Int
  image               String
  cart_id             Int?
  order_id            Int?
  cart                Cart?           @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  Order               Order?          @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model User {
  id      Int       @id @default(autoincrement())
  name    String
  avt     String?
  posts   Article[]
  answers Answer[]
  meta_data Json?
  account   Account? @relation(fields: [account_id], references: [id]) 
  account_id Int?     @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model Account {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  provider      String // Loại provider, ví dụ: "local", "google", "facebook"
  provider_id   String?
  status        Boolean       @default(true)
  created_at    DateTime      @default(now())
  updated_at    DateTime?     @updatedAt
  account_roles AccountRole[]
  user          User?         @relation
  customer      Customer?     @relation
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  code        String           @unique
  description String?
  accounts    AccountRole[]
  permission  RolePermission[]
}

model Permission {
  id    Int              @id @default(autoincrement())
  name  String           @unique
  roles RolePermission[]
}
model AccountRole {
  id        Int     @id @default(autoincrement())
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int
  role      Role    @relation(fields: [roleId], references: [id])
  roleId    Int
  @@unique([accountId, roleId])
}
model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@unique([roleId, permissionId])
}

model Customer {
  id          Int        @id @default(autoincrement())
  email       String?    @unique
  name        String
  phone       String?    @unique
  orders      Order[]
  carts       Cart[]
  gender      Gender?
  address     Address[]
  ratings     Rating[]
  questions   Question[]
  answer      Answer[]
  birthday    DateTime?
  provider    String
  status      Int        @default(1)
  provider_id String?
  created_at  DateTime   @default(now())
  updated_at  DateTime?  @updatedAt
  account     Account?   @relation(fields: [account_id], references: [id])
  account_id  Int?       @unique
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum LocationType {
  PROVINCE
  DISTRICT
  WARD
}

model Address {
  id             Int       @id @default(autoincrement())
  name           String
  phone          String
  detail_address String
  created_at     DateTime  @default(now())
  province       Location  @relation("Province", fields: [province_id], references: [id])
  district       Location  @relation("District", fields: [district_id], references: [id])
  ward           Location  @relation("Ward", fields: [ward_id], references: [id])
  ward_id        Int
  district_id    Int
  province_id    Int
  updated_at     DateTime? @updatedAt
  customer_id    Int
  customer       Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
}

model CategoryArticle {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String?
  image       String?
  slug        String    @unique
  published   Boolean?  @default(false)
  meta_data   Json?
  posts       Article[]
}

model Article {
  id          Int              @id @default(autoincrement())
  title       String           @unique
  slug        String           @unique
  status      Int
  content     String?
  author_id   Int?
  category_id Int?
  thumnal_url String?
  description String?
  meta_data   Json?
  created_at  DateTime         @default(now())
  updated_at  DateTime?        @updatedAt
  author      User?            @relation(fields: [author_id], references: [id])
  category    CategoryArticle? @relation(fields: [category_id], references: [id])
}

model Store {
  id             Int      @id @default(autoincrement())
  name           String
  phone          String?
  detail_address String?
  url_map        String?
  latitude       Decimal?
  longitude      Decimal?
  province       Location @relation("ProvinceStore", fields: [province_id], references: [id])
  district       Location @relation("DistrictStore", fields: [district_id], references: [id])
  ward           Location @relation("WardStore", fields: [ward_id], references: [id])
  ward_id        Int
  district_id    Int
  province_id    Int
}

model Page {
  id           Int       @id @default(autoincrement())
  title        String    @unique
  slug         String    @unique
  content_html String
  meta_data    Json?
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt
  status       Int       @default(0) // 0: Draft, 1: Published, etc.
}

model Setting {
  id             Int              @id @default(autoincrement())
  key            String           @unique
  value          Json?
  description    String?
  access_control Int[]
  active         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  SettingHistory SettingHistory[]
}

model SettingHistory {
  id         Int      @id @default(autoincrement())
  setting_id Int
  oldValue   Json
  newValue   Json
  updatedBy  String?
  updatedAt  DateTime @default(now())
  setting    Setting  @relation(fields: [setting_id], references: [id])
}

enum LocationTypeCode {
  PROVINCE
  DISTRICT
  WARD
}

model Location {
  id             Int              @id @default(autoincrement())
  name           String
  name_with_type String?
  type           LocationTypeCode
  code           String?
  parent_code    String?
  isDeleted      Boolean          @default(false)
  provinces      Address[]        @relation("Province")
  districts      Address[]        @relation("District")
  wards          Address[]        @relation("Ward")
  provincesStore Store[]          @relation("ProvinceStore")
  districtsStore Store[]          @relation("DistrictStore")
  wardsStore     Store[]          @relation("WardStore")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  logo      String?
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  products  Product[]
}

model File {
  id         Int      @id @default(autoincrement())
  id_root    String?
  url        String
  format     String
  created_at DateTime @default(now())
  name       String
  size       Int
  folder_id  Int?
  folder     Folder?  @relation(fields: [folder_id], references: [id])
}

model Folder {
  id         Int      @id @default(autoincrement())
  name       String
  parent_id  Int?
  created_at DateTime @default(now())
  parent     Folder?  @relation("FolderToFolder", fields: [parent_id], references: [id])
  children   Folder[] @relation("FolderToFolder")
  files      File[]
}
