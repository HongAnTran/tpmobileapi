// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Product {
  id                Int                     @id @default(autoincrement())
  title             String
  slug              String
  description_html  String
  vendor            String
  available         Boolean
  status            ProductStatus
  created_at        DateTime
  updated_at        DateTime
  published_at      DateTime
  barcode           String?
  options           ProductOption[]
  short_description String
  create_id         Int
  store_id          Int
  category          Category?                @relation(fields: [category_id], references: [id])
  category_id       Int?
  images            ProductImage[]
  imageId           Int
  variants          ProductVariant[]
  rating            Json
  specifications    ProductSpecifications[]
  meta_title        String
  meta_description  String
  meta_keywords     String
}

model ProductVariant {
  id                   Int       @id @default(autoincrement())
  barcode              String?
  compare_at_price     Float
  option1              String
  option2              String
  option3              String
  position             Int
  price                Float
  sku                  String
  title                String
  updated_at           DateTime?
  inventory_management String?
  inventory_quantity   Int
  image_id             Int
  available            Boolean
  product              Product   @relation(fields: [product_id], references: [id])
  product_id           Int
}

model ProductImage {
  id          Int       @id @default(autoincrement())
  created_at  DateTime?
  position    Int
  product     Product   @relation(fields: [product_id], references: [id])
  product_id  Int
  updated_at  DateTime?
  src         String
  variant_ids Int[]
}

model ProductOption {
  id         Int      @id @default(autoincrement())
  name       String
  position   Int
  product    Product  @relation(fields: [product_id], references: [id])
  product_id Int
  values     String[]
}



model ProductSpecifications {
  id          Int     @id @default(autoincrement())
  type_id     Int
  name        String
  value       String
  description String?
  product     Product @relation(fields: [product_id], references: [id])
  product_id  Int
}

model Cart {
  id          Int            @id @default(autoincrement())
  token       String
  item_count  Int
  total_price Float
  note        String?
  customer_id Int
  items       ProductOrder[] // Đây là một mối quan hệ một-nhiều với model ProductOrder
}

enum ProductStatus {
  HIDDEN
  SHOW
  DRAFT
}

model Order {
  id          Int            @id @default(autoincrement())
  token       String
  code        String
  customer_id Int
  total_price Float
  temp_price  Float
  ship_price  Float
  discount    Float
  note        String?
  status      OrderStatus
  promotions  Json[]
  shipping    Json
  payment     Json
  items       ProductOrder[]
}

enum OrderStatus {
  PENDING // Đơn hàng đang chờ xử lý
  PROCESSING // Đơn hàng đang được xử lý
  SHIPPED // Đơn hàng đã được gửi đi
  DELIVERED // Đơn hàng đã được giao thành công
  CANCELLED // Đơn hàng đã bị hủy
  FAILED // Đơn hàng không thành công
}

model ProductOrder {
  id                  Int      @id @default(autoincrement())
  title               String
  slug                String
  category_title      String
  category_id         Int
  vendor              String
  barcode             String?
  line_price          Float
  price               Float
  price_original      Float
  line_price_original Float
  variant_id          Int
  product_id          Int
  product_title       String
  variant_title       String
  variant_options     String[]
  quantity            Int
  image               String
  selected            Boolean
  cart                Cart?    @relation(fields: [cartId], references: [id])
  cartId              Int?
  Order               Order?   @relation(fields: [orderId], references: [id])
  orderId             Int?
}

enum CategoryProductStatus {
  DRAFT
  SHOW
}

model Category {
  id          Int                   @id @default(autoincrement())
  title       String
  description String?
  image       String
  slug        String
  status      CategoryProductStatus
  products    Product[]
}
