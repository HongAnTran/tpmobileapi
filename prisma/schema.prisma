generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                Int                     @id @default(autoincrement())
  title             String                  @unique
  slug              String                  @unique
  description_html  String?
  vendor            Vendor?                 @relation(fields: [vendor_id], references: [id])
  vendor_id         Int?
  available         Boolean                 @default(true)
  status            Int                     @default(0)
  created_at        DateTime                @default(now())
  updated_at        DateTime?               @updatedAt
  published_at      DateTime?
  barcode           String?                 @unique
  short_description String?
  meta_data         Json?
  price             Float                   @default(0)
  compare_at_price  Float                   @default(0)
  price_max         Float                   @default(0)
  price_min         Float                   @default(0)
  options           Option[]
  categories        Category[]              @relation("ProductCategories")
  variants          ProductVariant[]
  specifications    ProductSpecifications[] @relation("ProductToProductSpecifications")
  product_images    ProductImage[]
}

model Category {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  slug        String    @unique
  description String?
  image       String?
  published   Boolean?  @default(false)
  meta_data   Json?
  products    Product[] @relation("ProductCategories")
}



model ProductVariant {
  id                 Int           @id @default(autoincrement())
  barcode            String?       @unique
  option1            String
  option2            String
  option3            String
  position           Int
  compare_at_price   Float
  price              Float
  sku                String        @unique
  title              String
  updated_at         DateTime?     @updatedAt
  created_at         DateTime      @default(now())
  inventory_quantity Int
  available          Boolean
  product_id         Int
  product            Product       @relation(fields: [product_id], references: [id], onDelete: Cascade)
  image              ProductImage? @relation(fields: [image_id], references: [id])
  image_id           Int?
}

model ProductImage {
  id             Int              @id @default(autoincrement())
  url            String
  alt_text       String?
  position       Int
  productVariant ProductVariant[]
  is_featured    Boolean          @default(false)
  product        Product          @relation(fields: [product_id], references: [id])
  product_id     Int
}

model Option {
  id         Int      @id @default(autoincrement())
  name       String
  position   Int
  product_id Int
  values     String[]
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model SpecificationsType {
  id             Int                     @id @default(autoincrement())
  name           String
  specifications ProductSpecifications[]
}

model ProductSpecifications {
  id      Int                @id @default(autoincrement())
  type_id Int
  name    String
  value   String
  type    SpecificationsType @relation(fields: [type_id], references: [id], onDelete: Cascade)
  product Product[]          @relation("ProductToProductSpecifications")
}

model Cart {
  id          Int            @id @default(autoincrement())
  token       String         @unique
  item_count  Int
  total_price Float
  note        String?
  items       ProductOrder[]
  customer_id Int?
  customer    Customer?      @relation(fields: [customer_id], references: [id], onDelete: Cascade)
}

model Order {
  id          Int            @id @default(autoincrement())
  token       String         @unique
  code        String         @unique
  total_price Float
  temp_price  Float
  ship_price  Float
  discount    Float
  note        String?
  status      Int
  promotions  Json[]
  shipping    Shipping?
  payment     Payment?
  items       ProductOrder[]
  customer_id Int?
  customer    Customer?      @relation(fields: [customer_id], references: [id])
}

model Shipping {
  id                      Int            @id @default(autoincrement())
  order_id                Int            @unique
  address                 String
  province                String
  district                String
  ward                    String
  country                 String
  address_full            String
  ship_date               DateTime?
  tracking_number         String?
  phone                   String
  fullname                String
  status                  ShippingStatus @default(PROCESSING)
  order                   Order          @relation(fields: [order_id], references: [id])
  tracking_url            String? // Đường dẫn theo dõi đơn hàng
  carrier                 String? // Tên công ty vận chuyển
  estimated_delivery_date DateTime? // Ngày dự kiến giao hàng
  shipping_method         String? // Phương thức vận chuyển
  delivery_status         String? // Trạng thái giao hàng
}

enum ShippingStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Payment {
  id             Int           @id @default(autoincrement())
  order_id       Int           @unique
  method         String
  transaction_id String?
  amount         Float
  status         PaymentStatus
  payment_date   DateTime?
  order          Order         @relation(fields: [order_id], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model ProductOrder {
  id                  Int      @id @default(autoincrement())
  title               String
  slug                String
  category_title      String
  category_id         Int
  vendor              String
  barcode             String?
  line_price          Float
  price               Float
  price_original      Float
  line_price_original Float
  variant_id          Int
  product_id          Int
  product_title       String
  variant_title       String
  variant_options     String[]
  quantity            Int
  image               String
  cartId              Int?
  orderId             Int?
  cart                Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Order               Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  password   String
  username   String
  avt        String?
  posts      Article[]
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  role       Role      @relation(fields: [roleId], references: [id])
  roleId     Int
  meta_data  Json?
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Customer {
  id         Int       @id @default(autoincrement())
  email      String?   @unique
  password   String
  name       String
  phone      String    @unique
  orders     Order[]
  carts      Cart[]
  gender     Gender?
  address    Address[]
  birthday   DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum LocationType {
  PROVINCE
  DISTRICT
  WARD
}

model Address {
  id          Int       @id @default(autoincrement())
  name        String
  phone       String    @unique
  created_at  DateTime  @default(now())
  province    Location  @relation("Province", fields: [province_id], references: [id])
  district    Location  @relation("District", fields: [district_id], references: [id])
  ward        Location  @relation("Ward", fields: [ward_id], references: [id])
  ward_id     Int
  district_id Int
  province_id Int
  updated_at  DateTime? @updatedAt
  customer_id Int
  customer    Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
}

model CategoryArticle {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String?
  image       String?
  slug        String    @unique
  published   Boolean?  @default(false)
  meta_data   Json?
  posts       Article[]
}

model Article {
  id          Int              @id @default(autoincrement())
  title       String           @unique
  slug        String           @unique
  status      Int
  content     String?
  authorId    Int?
  category_id Int?
  thumnal_url String?
  description String?
  meta_data   Json?
  created_at  DateTime         @default(now())
  updated_at  DateTime?        @updatedAt
  author      User?            @relation(fields: [authorId], references: [id])
  category    CategoryArticle? @relation(fields: [category_id], references: [id])
}

model Store {
  id          Int      @id @default(autoincrement())
  name        String
  phone       String?
  address     String?
  url_map     String?
  province    Location @relation("ProvinceStore", fields: [province_id], references: [id])
  district    Location @relation("DistrictStore", fields: [district_id], references: [id])
  ward        Location @relation("WardStore", fields: [ward_id], references: [id])
  ward_id     Int
  district_id Int
  province_id Int
}

model Page {
  id                Int       @id @default(autoincrement())
  title             String    @unique
  slug              String    @unique
  content_html      String
  short_description String?
  meta_data         Json?
  created_at        DateTime  @default(now())
  updated_at        DateTime? @updatedAt
  status            Int       @default(0) // 0: Draft, 1: Published, etc.
}

model Setting {
  id             Int              @id @default(autoincrement())
  key            String           @unique
  value          Json?
  description    String?
  access_control String? // Ví dụ: role_id hoặc user_id
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  SettingHistory SettingHistory[]
}

model SettingHistory {
  id         Int      @id @default(autoincrement())
  setting_id Int
  oldValue   Json
  newValue   Json
  updatedBy  String? // Ví dụ: user_id
  updatedAt  DateTime @default(now())
  setting    Setting  @relation(fields: [setting_id], references: [id])
}

enum LocationTypeCode {
  PROVINCE
  DISTRICT
  WARD
}

model Location {
  id             Int              @id @default(autoincrement())
  name           String
  type           LocationTypeCode
  code           String?
  parent_code    String?
  provinces      Address[]        @relation("Province")
  districts      Address[]        @relation("District")
  wards          Address[]        @relation("Ward")
  provincesStore Store[]          @relation("ProvinceStore")
  districtsStore Store[]          @relation("DistrictStore")
  wardsStore     Store[]          @relation("WardStore")
}


model Vendor {
  id        Int       @id @default(autoincrement())
  name      String
  address   String?
  phone     String?
  email     String?
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  products Product[] 
}