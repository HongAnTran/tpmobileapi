generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                Int                     @id @default(autoincrement())
  title             String                  @unique
  slug              String                  @unique
  description_html  String?
  available         Boolean                 @default(true)
  status            Int                     @default(0)
  created_at        DateTime                @default(now())
  updated_at        DateTime?               @updatedAt
  published_at      DateTime?
  barcode           String?                 @unique
  short_description String?
  meta_data         Json?
  price             Float                   @default(0)
  compare_at_price  Float                   @default(0)
  buyback_price     Float?                   
  price_max         Float                   @default(0)
  price_min         Float                   @default(0)
  thumnail_url         String               @default("")
  brand_id          Int?
  category_id       Int
  meta_tags         Json?
  rating            Json?
  related           Int[]                   @default([])
  olderModels       Int[]                   @default([])
  brand             Brand?                  @relation(fields: [brand_id], references: [id])
  category          Category                @relation(fields: [category_id], references: [id])
  attributes        ProductAttributes[]
  sub_categories    ProductCategories[]
  images            ProductImage[]
  product_orders    ProductOrder[]
  variants          ProductVariant[]
  questions         Question[]
  ratings           Rating[]
  specifications    ProductSpecifications[] @relation("ProductToProductSpecifications")
  tags              Tags[]                  @relation("ProductToTags")
  consultations     ProductConsultation[]

  @@index([category_id, status])
}

model Tags {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  published   Boolean   @default(true)
  products    Product[] @relation("ProductToTags")
}

model ProductCategories {
  id          Int      @id @default(autoincrement())
  priority    Int?
  category_id Int
  product_id  Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  @@unique([product_id, category_id])
}

model ProductAttributes {
  id           Int               @id @default(autoincrement())
  product_id   Int
  attribute_id Int
  position     Int
  attribute    Attributes        @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  product      Product           @relation(fields: [product_id], references: [id], onDelete: Cascade)
  values       ProductAttributeValue[] 
  @@unique([product_id, attribute_id])
}
model AttributeValues {
  id                Int                 @id @default(autoincrement())
  value             String              @unique
  slug              String              @unique
  hex_color         String?
  attribute_id      Int
  attribute         Attributes          @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  product_attributes ProductAttributeValue[] 
  variants          ProductVariant[]    @relation("AttributeValuesToProductVariant")
}

model ProductAttributeValue {
  id                  Int               @id @default(autoincrement())
  product_attribute_id Int
  attribute_value_id  Int
  position           Int   @default(0)
  productAttribute   ProductAttributes  @relation(fields: [product_attribute_id], references: [id], onDelete: Cascade)
  attributeValue     AttributeValues    @relation(fields: [attribute_value_id], references: [id], onDelete: Cascade)
  @@unique([product_attribute_id, attribute_value_id])
}
model Attributes {
  id               Int                 @id @default(autoincrement())
  name             String              @unique
  style            OptionStyle         @default(RECTANGLE)
  key              String?             @unique
  attribute_values AttributeValues[]
  products         ProductAttributes[]
}
model Category {
  id                Int                 @id @default(autoincrement())
  title             String              @unique
  slug              String              @unique
  description       String?
  image             String?
  published         Boolean?            @default(false)
  meta_data         Json?
  products          Product[]
  productCategories ProductCategories[]
}

model Question {
  id          Int       @id @default(autoincrement())
  content     String
  product_id  Int
  status      Int      @default(0)
  customer_id Int?
  email       String?
  phone       String?
  full_name   String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  answers     Answer[]
  customer    Customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [product_id], references: [id])
}

model Answer {
  id          Int       @id @default(autoincrement())
  content     String
  createdAt   DateTime  @default(now())
  author_id   Int
  question_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  author      User     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  question    Question  @relation(fields: [question_id], references: [id])
}

model Rating {
  id          Int       @id @default(autoincrement())
  rate        Int
  content     String?
  images      String[]
  product_id  Int
  customer_id Int?  
  status      Int       @default(0)
  like_count  Int       @default(0)
  is_seeding  Boolean   @default(false) 
  customer_seed  Json?   
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  tags        RatingTag[]
  customer    Customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
}
model RatingTag{
  id          Int       @id @default(autoincrement())
  code       String @unique
  title      String
  rating      Rating[]
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
}

model ProductConsultation {
  id          Int      @id @default(autoincrement())
  name        String
  phone       String
  email       String?
  message     String?
  product_id  Int
  status      Int      @default(0)
  tags        Json?
  created_at  DateTime @default(now())
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  @@index([product_id])
}


model ProductVariant {
  id                 Int               @id @default(autoincrement())
  barcode            String?           @unique
  position           Int
  compare_at_price   Float
  price              Float
  sku                String            @unique
  title              String
  updated_at         DateTime?         @updatedAt
  created_at         DateTime          @default(now())
  inventory_quantity Int
  available          Boolean
  product_id         Int
  image_id           Int?
  price_origin       Float             @default(0)
  sold_quantity      Int               @default(0)
  product_orders     ProductOrder[]
  image              ProductImage?     @relation(fields: [image_id], references: [id])
  product            Product           @relation(fields: [product_id], references: [id], onDelete: Cascade)
  attribute_values   AttributeValues[] @relation("AttributeValuesToProductVariant")
}



model ProductImage {
  id             Int              @id @default(autoincrement())
  url            String
  alt_text       String?
  position       Int
  is_featured    Boolean          @default(false)
  product_id     Int
  product        Product          @relation(fields: [product_id], references: [id], onDelete: Cascade)
  productVariant ProductVariant[]
}

model SpecificationsGroup {
  id             Int                     @id @default(autoincrement())
  name           String                  @unique
  type_id        Int
  specifications ProductSpecifications[]
  type           SpecificationsType      @relation(fields: [type_id], references: [id], onDelete: Cascade)
}

model SpecificationsType {
  id     Int                   @id @default(autoincrement())
  name   String
  groups SpecificationsGroup[]
}

model ProductSpecifications {
  id       Int                 @id @default(autoincrement())
  value    String
  group_id Int
  link     String?
  group    SpecificationsGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
  product  Product[]           @relation("ProductToProductSpecifications")
}

model Cart {
  id          Int            @id @default(autoincrement())
  token       String         @unique
  item_count  Int
  total_price Float
  note        String?
  customer_id Int?
  created_at  DateTime       @default(now())
  updated_at  DateTime?      @updatedAt
  customer    Customer?      @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  items       ProductOrder[]
}

model Order {
  id          Int            @id @default(autoincrement())
  token       String         @unique
  code        String         @unique
  total_price Float
  temp_price  Float
  ship_price  Float
  discount    Float
  note        String?
  note_private      String?
  status      Int
  promotions  Json[]
  coupons    Coupon[]
  customer_id Int?
  created_at  DateTime       @default(now())
  updated_at  DateTime?      @updatedAt
  sold_at     DateTime?       
  available   Boolean        @default(true)
  shipping_type Int          @default(1)
  tags       OrderTag[]
  customer    Customer?      @relation(fields: [customer_id], references: [id])
  payment     Payment?
  items       ProductOrder[]
  shipping    Shipping?
  pickup          OrderPickup?
  @@index([status])
}

model Coupon {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  type        Int
  amount      Float
  min_value   Float
  max_value   Float
  max_use     Int
  count_use   Int      @default(0)
  available_use Int      @default(0)
  start_date  DateTime?
  end_date    DateTime?
  status      Int      @default(0)
  author_id   Int?
  author      Customer?    @relation(fields: [author_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime? @updatedAt
  usedAt      DateTime?
  created_by  User?   @relation(fields: [created_by_id], references: [id])
  created_by_id Int?
  order_id    Int?
  order       Order?   @relation(fields: [order_id], references: [id], onDelete: Cascade)
}
model OrderTag {
  id          Int      @id @default(autoincrement())
  order_id    Int
  tag         String
  created_at  DateTime @default(now())
  updated_at  DateTime? @updatedAt
  order       Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Shipping {
  id                      Int            @id @default(autoincrement())
  order_id                Int            @unique
  address                 String
  province                String
  district                String
  ward                    String
  country                 String
  address_full            String
  ship_date               DateTime?
  tracking_number         String?
  phone                   String
  fullname                String
  status                  ShippingStatus @default(PENDING)
  tracking_url            String?
  carrier                 String?
  estimated_delivery_date DateTime?
  shipping_method         String?
  delivery_status         String?
  created_at              DateTime       @default(now())
  updated_at              DateTime?      @updatedAt
  email                   String?
  order                   Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
}
model OrderPickup {
  id         Int      @id @default(autoincrement())
  order_id   Int      @unique 
  store_id   Int    
  status     Int      
  fullname   String   
  phone      String   
  email      String?  
  note       String?  
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  store      Store    @relation(fields: [store_id], references: [id])
}
enum ShippingType {
  DELIVERY  
  PICKUP    
}

model Payment {
  id             Int           @id @default(autoincrement())
  order_id       Int           @unique
  method         String
  transaction_id String?
  amount         Float
  status         PaymentStatus
  payment_date   DateTime?
  order          Order         @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model ProductOrder {
  id                  Int             @id @default(autoincrement())
  line_price          Float
  price               Float
  price_original      Float
  line_price_original Float
  discount            Float        @default(0)
  variant_id          Int
  product_id          Int
  quantity            Int
  cart_id             Int?
  order_id            Int?
  cart                Cart?           @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  Order               Order?          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product             Product        @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant             ProductVariant? @relation(fields: [variant_id], references: [id], onDelete: Cascade)
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  avatar        String?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  meta_data  Json?
  posts      Article[]
  answers    Answer[]
  account    Account? 
  coupons    Coupon[]
}

model Account {
  id         Int      @id @default(autoincrement())
  user_id    Int     @unique
  email      String  @unique
  password   String
  access_token  String?
  status     Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  user      User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles      Role[] @relation("AccountToRole")
  login_histories  AccountLoginHistory[]
}

model AccountLoginHistory {
  id         Int      @id @default(autoincrement())
  account_id Int
  ip         String
  user_agent String?
  device     String?
  location   String?
  browser    String?
  os         String?
  latitude   Float?
  longitude  Float?
  login_time DateTime @default(now())
  account    Account  @relation(fields: [account_id], references: [id])
}


model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  code        String        @unique
  description String?
  accounts    Account[] @relation("AccountToRole")
  permissions Permission[]  @relation("RoleToPermission")
}

model Permission {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  code        String        @unique
  description String?
  roles       Role[]        @relation("RoleToPermission")
}


model Customer {
  id          Int        @id @default(autoincrement())
  email       String?    @unique
  first_name        String
  last_name        String
  full_name        String
  phone       String?     
  avatar      String?    
  gender      Gender?
  birthday    DateTime?
  created_at  DateTime   @default(now())
  updated_at  DateTime?  @updatedAt
  provider    String
  provider_id String?
  status      Int        @default(1)
  account_id  Int?       @unique
  meta_data   Json?
  address     Address[]
  carts       Cart[]
  account     CustomerAccount?   @relation(fields: [account_id], references: [id] , onDelete: Cascade)
  orders      Order[]
  questions   Question[]
  ratings     Rating[]
  coupons     Coupon[]
}

model CustomerAccount {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  active       Boolean       @default(false)
  active_token String?
  active_expired_at DateTime?
  provider      String
  provider_id   String?
  status        Boolean       @default(true)
  created_at    DateTime      @default(now())
  updated_at    DateTime?     @updatedAt
  customer      Customer?
}

model Address {
  id             Int       @id @default(autoincrement())
  full_name      String
  phone          String
  email          String?
  ward_id        Int
  district_id    Int
  province_id    Int
  customer_id    Int
  detail_address String
  type           AddressType
  is_default     Boolean   @default(false)
  is_deleted     Boolean   @default(false)
  updated_at     DateTime? @updatedAt
  created_at     DateTime  @default(now())
  customer       Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  district       Location  @relation("District", fields: [district_id], references: [id])
  province       Location  @relation("Province", fields: [province_id], references: [id])
  ward           Location  @relation("Ward", fields: [ward_id], references: [id])
}
enum AddressType {
  HOME
  WORK
  OTHER
}

model CategoryArticle {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String?
  image       String?
  slug        String    @unique
  published   Boolean?  @default(false)
  meta_data   Json?
  posts       Article[]
}

model Article {
  id          Int              @id @default(autoincrement())
  title       String           @unique
  slug        String           @unique
  status      Int
  content     String?
  category_id Int?
  thumnal_url String?
  description String?
  meta_data   Json?
  created_at  DateTime         @default(now())
  updated_at  DateTime?        @updatedAt
  published_at DateTime?
  author_id   Int?
  tags        ArticleTag[]
  author      User?            @relation(fields: [author_id], references: [id])
  category    CategoryArticle? @relation(fields: [category_id], references: [id])
}

model ArticleTag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  published   Boolean?  @default(false)
  posts       Article[]
}

model Store {
  id             Int      @id @default(autoincrement())
  name           String
  phone          String?
  url_map        String?
  ward_id        Int
  district_id    Int
  province_id    Int
  available      Boolean        @default(true)
  public        Boolean          @default(true)
  latitude       Decimal?
  longitude      Decimal?
  detail_address String?
  order_pickup   OrderPickup[]
  district       Location @relation("DistrictStore", fields: [district_id], references: [id])
  province       Location @relation("ProvinceStore", fields: [province_id], references: [id])
  ward           Location @relation("WardStore", fields: [ward_id], references: [id])
}

model Page {
  id           Int       @id @default(autoincrement())
  title        String    @unique
  slug         String    @unique
  content_html String
  meta_data    Json?
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt
  status       Int       @default(0)
}

model Setting {
  id             Int              @id @default(autoincrement())
  key            String           @unique
  value          Json?
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  access_control Int[]
  active         Boolean          @default(true)
  SettingHistory SettingHistory[]
}

model SettingHistory {
  id         Int      @id @default(autoincrement())
  setting_id Int
  oldValue   Json
  newValue   Json
  updatedBy  String?
  updatedAt  DateTime @default(now())
  setting    Setting  @relation(fields: [setting_id], references: [id])
}

model Location {
  id             Int              @id @default(autoincrement())
  name           String
  type           LocationTypeCode
  code           String?
  parent_code    String?
  isDeleted      Boolean          @default(false)
  name_with_type String?
  districts      Address[]        @relation("District")
  provinces      Address[]        @relation("Province")
  wards          Address[]        @relation("Ward")
  districtsStore Store[]          @relation("DistrictStore")
  provincesStore Store[]          @relation("ProvinceStore")
  wardsStore     Store[]          @relation("WardStore")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  logo      String?
  products  Product[]
}

model File {
  id         Int      @id @default(autoincrement())
  id_root    String?
  url        String
  format     String
  created_at DateTime @default(now())
  name       String
  folder_id  Int?
  size       Int
  folder     Folder?  @relation(fields: [folder_id], references: [id])
}

model Folder {
  id         Int      @id @default(autoincrement())
  name       String
  parent_id  Int?
  created_at DateTime @default(now())
  files      File[]
  parent     Folder?  @relation("FolderToFolder", fields: [parent_id], references: [id])
  children   Folder[] @relation("FolderToFolder")
}

model PromotionSubscription {
  id         Int      @id @default(autoincrement()) 
  email      String   @unique 
  isActive   Boolean  @default(false) 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  verificationToken String?  @unique 
  verifiedAt        DateTime? 
}


enum OptionStyle {
  IMAGE
  COLOR
  CIRCLE
  RECTANGLE
  RADIO
}

enum ShippingStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum LocationType {
  PROVINCE
  DISTRICT
  WARD
}

enum LocationTypeCode {
  PROVINCE
  DISTRICT
  WARD
}
