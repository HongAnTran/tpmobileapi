version: '3.7'
services:
  postgres:
    image: postgres:13
    container_name: tp_db
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: ${DATABASE_DB}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always  

  redis:
    image: redis:7 
    container_name: tp_redis
    ports:
      - '6379:6379' 
    volumes:
      - redis_data:/data 
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: always

  app:
    build:
      context: . # Thư mục chứa Dockerfile
      dockerfile: Dockerfile # Tên file Dockerfile
    container_name: tp_api
    ports:
      - '4000:4000' # Cổng 4000 như yêu cầu của bạn
    environment:
      # Database
      - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_DB}?schema=public
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_DB=${DATABASE_DB}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # Email
      - ADMIN_EMAIL_ADDRESS=${ADMIN_EMAIL_ADDRESS}
      - ADMIN_EMAIL_PASSWORD=${ADMIN_EMAIL_PASSWORD}
      - EMAIL_NOTI=${EMAIL_NOTI}
      
      # App URLs
      - APP_URL=${APP_URL}
      - BASE_URL=${BASE_URL}
      - STATIC_FOLDER=${STATIC_FOLDER}
      - DRAFT_ORDER_RETENTION_DAYS=${DRAFT_ORDER_RETENTION_DAYS}
      
      # JWT
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_SECRET_VERIFY=${JWT_SECRET_VERIFY}
      
      # Cloudinary/CDN
      - CLOUDINARY_URL_CDN=${CLOUDINARY_URL_CDN}
      - CDN_URL=${CDN_URL}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      
      # Node environment
      - NODE_ENV=production
    depends_on:
      - postgres
      - redis
    restart: always

volumes:
  postgres_data:
  redis_data: